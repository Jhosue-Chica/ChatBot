import json
import pymongo
from pymongo import MongoClient
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()
MONGODB_URI = os.getenv('MONGODB_URI')
MONGODB_DB = os.getenv('MONGODB_DB', 'TechStore')

def migrate_data_to_mongodb(json_file='products.json'):
    """
    Migra los datos del archivo JSON a MongoDB
    """
    # Verificar que la URI de MongoDB est√° disponible
    if not MONGODB_URI:
        print("‚ö†Ô∏è MONGODB_URI no encontrado en el archivo .env")
        return False
    
    # Cargar datos desde el archivo JSON
    try:
        with open(json_file, 'r', encoding='utf-8') as file:
            data = json.load(file)
            print(f"‚úÖ Datos cargados correctamente desde {json_file}")
    except FileNotFoundError:
        print(f"‚ùå Archivo no encontrado: {json_file}")
        return False
    except json.JSONDecodeError:
        print(f"‚ùå Error al decodificar el archivo JSON: {json_file}")
        return False
    
    # Conectar a MongoDB
    try:
        client = MongoClient(MONGODB_URI)
        db = client[MONGODB_DB]
        print(f"‚úÖ Conexi√≥n exitosa a MongoDB: {MONGODB_DB}")
    except Exception as e:
        print(f"‚ùå Error al conectar a MongoDB: {str(e)}")
        return False
    
    # Migrar informaci√≥n de la tienda
    try:
        # Eliminar datos existentes
        db.storeInfo.delete_many({})
        # Insertar nueva informaci√≥n
        db.storeInfo.insert_one(data.get('store_info', {}))
        print(f"‚úÖ Informaci√≥n de tienda migrada con √©xito")
    except Exception as e:
        print(f"‚ùå Error al migrar informaci√≥n de tienda: {str(e)}")
    
    # Migrar categor√≠as
    try:
        # Eliminar datos existentes
        db.categories.delete_many({})
        # Insertar nuevas categor√≠as
        categories = [{"name": category} for category in data.get('categories', [])]
        if categories:
            db.categories.insert_many(categories)
            print(f"‚úÖ {len(categories)} categor√≠as migradas con √©xito")
        else:
            print("‚ö†Ô∏è No se encontraron categor√≠as para migrar")
    except Exception as e:
        print(f"‚ùå Error al migrar categor√≠as: {str(e)}")
    
    # Migrar productos
    try:
        # Eliminar datos existentes
        db.products.delete_many({})
        # Insertar nuevos productos
        products = data.get('products', [])
        if products:
            db.products.insert_many(products)
            print(f"‚úÖ {len(products)} productos migrados con √©xito")
        else:
            print("‚ö†Ô∏è No se encontraron productos para migrar")
    except Exception as e:
        print(f"‚ùå Error al migrar productos: {str(e)}")
    
    # Crear √≠ndices para mejorar el rendimiento de las consultas
    try:
        # √çndice para b√∫squeda r√°pida por ID
        db.products.create_index("id", unique=True)
        # √çndice para b√∫squeda por categor√≠a
        db.products.create_index("category")
        # √çndice para b√∫squeda de ofertas
        db.products.create_index("ofertas.activa")
        print("‚úÖ √çndices creados correctamente")
    except Exception as e:
        print(f"‚ùå Error al crear √≠ndices: {str(e)}")
    
    print(f"‚úÖ Migraci√≥n completada con √©xito a la base de datos {MONGODB_DB}")
    return True

if __name__ == "__main__":
    print("=" * 50)
    print(f"üöÄ INICIANDO MIGRACI√ìN DE DATOS A MONGODB")
    print("=" * 50)
    
    success = migrate_data_to_mongodb('products.json')
    
    if success:
        print("\n" + "=" * 50)
        print("‚úÖ MIGRACI√ìN COMPLETADA EXITOSAMENTE")
        print("=" * 50)
    else:
        print("\n" + "=" * 50)
        print("‚ùå LA MIGRACI√ìN NO SE COMPLET√ì CORRECTAMENTE")
        print("=" * 50)