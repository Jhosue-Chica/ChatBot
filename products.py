import os
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from telegram import Update
import openai
import time

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Verificar que las claves est√°n disponibles
if not TELEGRAM_TOKEN:
    logger.error("‚ö†Ô∏è TELEGRAM_TOKEN no encontrado en el archivo .env")
    exit(1)
    
if not OPENAI_API_KEY:
    logger.error("‚ö†Ô∏è OPENAI_API_KEY no encontrado en el archivo .env")
    exit(1)

# Configurar OpenAI
openai.api_key = OPENAI_API_KEY

class StoreBot:
    def __init__(self, products_file='products.json'):
        self.conversations = {}
        self.start_time = datetime.now()
        self.products_data = self.load_products(products_file)
        self.store_info = self.products_data.get('store_info', {})
        
        # Crear un contexto del sistema para enviar a GPT
        self.system_context = self.create_system_context()
        
        logger.info(f"üìù Inicializando StoreBot a las {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üè™ Informaci√≥n de tienda cargada: {self.store_info.get('name', 'Desconocido')}")
        logger.info(f"üì¶ Productos cargados: {len(self.products_data.get('products', []))}")
    
    def load_products(self, file_path):
        """Cargar datos de productos desde un archivo JSON"""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
                logger.info(f"‚úÖ Datos de productos cargados correctamente desde {file_path}")
                return data
        except FileNotFoundError:
            logger.error(f"‚ùå Archivo de productos no encontrado: {file_path}")
            return {"store_info": {"name": "Tienda Demo"}, "products": []}
        except json.JSONDecodeError:
            logger.error(f"‚ùå Error al decodificar el archivo JSON: {file_path}")
            return {"store_info": {"name": "Tienda Demo"}, "products": []}
    
    def create_system_context(self):
        """Crear un contexto del sistema para entrenar al modelo GPT"""
        store_name = self.store_info.get('name', 'Nuestra Tienda')
        store_desc = self.store_info.get('description', '')
        
        # Crear una representaci√≥n de los productos para el contexto
        products_info = []
        for product in self.products_data.get('products', []):
            product_info = (
                f"ID: {product.get('id', 'N/A')}, "
                f"Nombre: {product.get('name', 'N/A')}, "
                f"Categor√≠a: {product.get('category', 'N/A')}, "
                f"Precio: ${product.get('price', 0):.2f}, "
                f"Descripci√≥n: {product.get('description', 'N/A')}, "
                f"Stock: {product.get('stock', 0)} unidades, "
                f"Disponible: {'S√≠' if product.get('disponible', False) else 'No'}"
            )
            
            # A√±adir informaci√≥n de ofertas si existe
            ofertas = product.get('ofertas', {})
            if ofertas.get('activa', False):
                product_info += (
                    f", OFERTA: {ofertas.get('descuento', '')} de descuento, "
                    f"Precio de oferta: ${ofertas.get('precio_oferta', 0):.2f}, "
                    f"V√°lido hasta: {ofertas.get('fecha_fin', 'N/A')}"
                )
            
            products_info.append(product_info)
        
        # Crear el mensaje del sistema
        system_message = f"""
Eres un asistente virtual para la tienda {store_name}. 
{store_desc}

INFORMACI√ìN DE LA TIENDA:
- Nombre: {self.store_info.get('name', 'N/A')}
- Horario: {self.store_info.get('horario', 'N/A')}
- Direcci√≥n: {self.store_info.get('direccion', 'N/A')}
- Tel√©fono: {self.store_info.get('telefono', 'N/A')}
- Email: {self.store_info.get('email', 'N/A')}
- Pol√≠tica de env√≠os: {self.store_info.get('politica_envios', 'N/A')}
- Pol√≠tica de devoluciones: {self.store_info.get('politica_devoluciones', 'N/A')}

CAT√ÅLOGO DE PRODUCTOS:
{chr(10).join(products_info)}

INSTRUCCIONES:
1. Debes actuar siempre como un representante amable y profesional de {store_name}.
2. Proporciona informaci√≥n precisa sobre los productos, precios y disponibilidad.
3. Si un producto est√° en oferta, aseg√∫rate de mencionarlo y destacar el descuento.
4. Si un cliente pregunta por un producto que no est√° en el cat√°logo, ind√≠cale amablemente que no est√° disponible pero sugiere alternativas similares.
5. Para compras, indica al cliente que puede realizar el pedido en nuestra tienda f√≠sica, a trav√©s de nuestra web o en este mismo chat.
6. Cuando el cliente pregunte por el proceso de compra, expl√≠cale que puede pagar con tarjeta de cr√©dito, PayPal o transferencia bancaria.
7. Mant√©n un tono conversacional, amable y cercano en todo momento.
8. Si te preguntan sobre un tema que no est√° relacionado con la tienda o los productos, redir√≠gelos amablemente de vuelta a temas relacionados con nuestra tienda.
"""
        logger.info("‚úÖ Contexto del sistema creado para GPT")
        return system_message
        
    async def start_command(self, update: Update, context: CallbackContext):
        """Manejador del comando /start"""
        user = update.message.from_user
        logger.info(f"üì£ Usuario {user.first_name} (ID: {user.id}) ha iniciado el bot")
        
        store_name = self.store_info.get('name', 'nuestra tienda')
        
        welcome_message = (
            f"üëã ¬°Hola {user.first_name}! Bienvenido/a a {store_name}.\n\n"
            f"Soy tu asistente virtual y estoy aqu√≠ para ayudarte con cualquier duda sobre nuestros productos, "
            f"precios, disponibilidad o realizar un pedido.\n\n"
            f"¬øEn qu√© puedo ayudarte hoy?\n\n"
            f"Usa /productos para ver un listado de nuestros productos o /ayuda para m√°s informaci√≥n."
        )
        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: CallbackContext):
        """Manejador del comando /help o /ayuda"""
        user = update.message.from_user
        logger.info(f"‚ÑπÔ∏è Usuario {user.first_name} (ID: {user.id}) solicit√≥ ayuda")
        
        help_message = (
            "üìö Comandos disponibles:\n"
            "/start - Iniciar el asistente\n"
            "/ayuda - Mostrar esta ayuda\n"
            "/productos - Ver listado de productos\n"
            "/ofertas - Ver productos en oferta\n"
            "/info - Informaci√≥n de la tienda\n"
            "/reset - Reiniciar la conversaci√≥n\n\n"
            "Tambi√©n puedes preguntarme directamente sobre productos espec√≠ficos, precios o cualquier duda que tengas üòä"
        )
        await update.message.reply_text(help_message)

    async def products_command(self, update: Update, context: CallbackContext):
        """Manejador del comando /productos"""
        user = update.message.from_user
        logger.info(f"üì¶ Usuario {user.first_name} (ID: {user.id}) solicit√≥ listado de productos")
        
        products = self.products_data.get('products', [])
        
        if not products:
            await update.message.reply_text("Lo siento, no hay productos disponibles en este momento.")
            return
        
        categories = {}
        for product in products:
            category = product.get('category', 'Sin categor√≠a')
            if category not in categories:
                categories[category] = []
            
            price = product.get('price', 0)
            name = product.get('name', 'Producto sin nombre')
            
            # Verificar si hay oferta
            ofertas = product.get('ofertas', {})
            if ofertas.get('activa', False):
                price_text = f"${price:.2f} üî• OFERTA: ${ofertas.get('precio_oferta', 0):.2f}"
            else:
                price_text = f"${price:.2f}"
            
            categories[category].append(f"‚Ä¢ {name}: {price_text}")
        
        # Construir mensaje por categor√≠as
        message_parts = ["üìã Nuestro cat√°logo de productos:\n"]
        
        for category, items in categories.items():
            message_parts.append(f"\nüìÅ {category}:")
            message_parts.extend(items)
        
        message_parts.append("\n\nPara m√°s detalles sobre un producto espec√≠fico, preg√∫ntame por su nombre.")
        
        await update.message.reply_text("\n".join(message_parts))

    async def offers_command(self, update: Update, context: CallbackContext):
        """Manejador del comando /ofertas"""
        user = update.message.from_user
        logger.info(f"üî• Usuario {user.first_name} (ID: {user.id}) solicit√≥ ofertas")
        
        products = self.products_data.get('products', [])
        offers = []
        
        for product in products:
            ofertas = product.get('ofertas', {})
            if ofertas.get('activa', False):
                name = product.get('name', 'Producto sin nombre')
                original_price = product.get('price', 0)
                offer_price = ofertas.get('precio_oferta', 0)
                discount = ofertas.get('descuento', '')
                end_date = ofertas.get('fecha_fin', 'Tiempo limitado')
                
                offers.append(
                    f"‚Ä¢ {name}\n"
                    f"  Precio original: ${original_price:.2f}\n"
                    f"  Precio oferta: ${offer_price:.2f} ({discount} descuento)\n"
                    f"  V√°lido hasta: {end_date}"
                )
        
        if offers:
            message = "üî• OFERTAS ESPECIALES üî•\n\n" + "\n\n".join(offers)
            message += "\n\nPara m√°s detalles o realizar una compra, solo preg√∫ntame."
        else:
            message = "Lo siento, actualmente no hay ofertas especiales disponibles. ¬°Revisa m√°s tarde!"
        
        await update.message.reply_text(message)

    async def store_info_command(self, update: Update, context: CallbackContext):
        """Manejador del comando /info"""
        user = update.message.from_user
        logger.info(f"‚ÑπÔ∏è Usuario {user.first_name} (ID: {user.id}) solicit√≥ informaci√≥n de la tienda")
        
        info_message = (
            f"‚ÑπÔ∏è Informaci√≥n de {self.store_info.get('name', 'nuestra tienda')}:\n\n"
            f"{self.store_info.get('description', '')}\n\n"
            f"üïí Horario: {self.store_info.get('horario', 'No disponible')}\n"
            f"üìç Direcci√≥n: {self.store_info.get('direccion', 'No disponible')}\n"
            f"üìû Tel√©fono: {self.store_info.get('telefono', 'No disponible')}\n"
            f"üìß Email: {self.store_info.get('email', 'No disponible')}\n\n"
            f"üöö Env√≠os: {self.store_info.get('politica_envios', 'No disponible')}\n"
            f"üîÑ Devoluciones: {self.store_info.get('politica_devoluciones', 'No disponible')}"
        )
        
        await update.message.reply_text(info_message)

    async def reset_command(self, update: Update, context: CallbackContext):
        """Manejador del comando /reset"""
        user = update.message.from_user
        user_id = user.id
        
        if user_id in self.conversations:
            msg_count = len(self.conversations[user_id])
            del self.conversations[user_id]
            logger.info(f"üîÑ Usuario {user.first_name} (ID: {user_id}) reinici√≥ su conversaci√≥n ({msg_count} mensajes borrados)")
            await update.message.reply_text("üîÑ Conversaci√≥n reiniciada correctamente. ¬øEn qu√© puedo ayudarte ahora?")
        else:
            logger.info(f"üîÑ Usuario {user.first_name} (ID: {user_id}) intent√≥ reiniciar, pero no tiene una conversaci√≥n activa")
            await update.message.reply_text("üîÑ No hay una conversaci√≥n activa para reiniciar. ¬øEn qu√© puedo ayudarte?")

    async def handle_message(self, update: Update, context: CallbackContext):
        """Manejador principal de mensajes"""
        user = update.message.from_user
        user_id = user.id
        user_message = update.message.text
        
        # Log del mensaje recibido
        logger.info(f"üí¨ Mensaje recibido de {user.first_name} (ID: {user_id}): '{user_message[:30]}...' si es largo")

        # Inicializar o recuperar el historial de conversaci√≥n
        if user_id not in self.conversations:
            # Si es una nueva conversaci√≥n, a√±adir el contexto del sistema
            self.conversations[user_id] = [
                {"role": "system", "content": self.system_context}
            ]
            logger.info(f"üë§ Nueva conversaci√≥n iniciada con usuario {user.first_name} (ID: {user_id})")

        # A√±adir el mensaje del usuario al historial
        self.conversations[user_id].append({
            "role": "user",
            "content": user_message
        })

        try:
            # Indicar que el bot est√° escribiendo
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id, 
                action="typing"
            )
            
            start_time = time.time()
            logger.info(f"ü§ñ Solicitando respuesta a GPT-3.5 para usuario {user.first_name} (ID: {user_id})")

            # Obtener respuesta de GPT-3.5
            response = await self.get_gpt_response(self.conversations[user_id])
            
            end_time = time.time()
            response_time = end_time - start_time
            
            # Log de estad√≠sticas de la respuesta
            logger.info(f"‚úÖ Respuesta generada en {response_time:.2f} segundos para usuario {user.first_name} (ID: {user_id})")
            logger.info(f"üìè Longitud de la respuesta: {len(response)} caracteres")

            # A√±adir la respuesta al historial
            self.conversations[user_id].append({
                "role": "assistant",
                "content": response
            })

            # Enviar la respuesta
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"‚ùå Error procesando mensaje del usuario {user.first_name} (ID: {user_id}): {str(e)}")
            error_message = (
                "‚ùå Lo siento, ocurri√≥ un error al procesar tu mensaje.\n"
                "Por favor, intenta nuevamente o usa /reset para reiniciar la conversaci√≥n."
            )
            await update.message.reply_text(error_message)

    async def get_gpt_response(self, conversation_history):
        """Obtener respuesta de GPT-3.5"""
        try:
            logger.info(f"üîÑ Enviando solicitud a OpenAI con {len(conversation_history)} mensajes en el historial")
            
            response = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=conversation_history,
                max_tokens=1000,
                temperature=0.7
            )
            
            logger.info(f"‚úÖ Respuesta recibida de OpenAI exitosamente")
            return response.choices[0].message.content
        except openai.error.RateLimitError:
            logger.error("‚ö†Ô∏è Error de l√≠mite de tasa (Rate Limit) en OpenAI API")
            raise Exception("Se ha alcanzado el l√≠mite de solicitudes a OpenAI. Por favor, intenta m√°s tarde.")
        except openai.error.AuthenticationError:
            logger.error("üîë Error de autenticaci√≥n en OpenAI API")
            raise Exception("Error de autenticaci√≥n con OpenAI. Verifica tu API key.")
        except Exception as e:
            logger.error(f"‚ùå Error general al comunicarse con OpenAI: {str(e)}")
            raise Exception(f"Error al comunicarse con GPT-3.5: {str(e)}")

    def error_handler(self, update, context):
        """Manejador global de errores"""
        logger.error(f"‚ö†Ô∏è Error en la actualizaci√≥n {update}: {context.error}")

    def run(self):
        """Iniciar el bot"""
        logger.info("ü§ñ Iniciando el bot de tienda con Telegram...")
        
        # Crear la aplicaci√≥n
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        # A√±adir handlers
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("ayuda", self.help_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("productos", self.products_command))
        app.add_handler(CommandHandler("ofertas", self.offers_command))
        app.add_handler(CommandHandler("info", self.store_info_command))
        app.add_handler(CommandHandler("reset", self.reset_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # A√±adir manejador de errores
        app.add_error_handler(self.error_handler)

        # Iniciar el bot
        logger.info(f"‚úÖ Bot de tienda {self.store_info.get('name', '')} configurado y listo para funcionar")
        logger.info("üöÄ Iniciando polling...")
        app.run_polling()
        logger.info("üëã Bot detenido")

if __name__ == "__main__":
    print("=" * 50)
    print(f"ü§ñ INICIANDO BOT DE TIENDA CON GPT-3.5")
    print("=" * 50)
    bot = StoreBot('products.json')
    try:
        bot.run()
    except KeyboardInterrupt:
        print("\n" + "=" * 50)
        print("‚õî Bot detenido por el usuario")
        print("=" * 50)
    except Exception as e:
        print("\n" + "=" * 50)
        print(f"‚ùå Error cr√≠tico: {str(e)}")
        print("=" * 50)